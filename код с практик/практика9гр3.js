// function max(a, b) {
//     // if
//     // —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
//     // 1. –Ω–∞–º –Ω–∞–¥–æ —Å—Ä–∞–≤–Ω–∏—Ç—å a –∏ b
//     // –µ—Å–ª–∏ a > b —Ç–æ –≤–µ—Ä–Ω—É—Ç—å a
//     // –∏–Ω–∞—á–µ –Ω–∞–¥–æ –≤–µ—Ä–Ω—É—Ç—å b
//     if (a > b) {
//         return a;
//     } else {
//         return b;
//     }
// }

// console.log(max(3, 5));
// console.log(max(8, 2));

// —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—á–∞—Ç–∞–µ—Ç —á—ë—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –æ—Ç 2 –¥–æ 100;

// —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –≤—Å–µ —á–∏—Å–ª–∞ —Å 2 –¥–æ 100 —Å —à–∞–≥–æ–º 2

// –ø–µ—á–∞—Ç—å–ß—ë—Ç–Ω—ã—Ö–ß–∏—Å–µ–ª
// printEvenNumbers
// function printEvenNumbers() {
//     // while, do/while, for
//     for (let i = 2; i <= 100; i += 2) {
//         console.log(i);
//     }
// }

// printEvenNumbers();

/**
 * —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç –≤—Å–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –æ—Ç start –¥–æ end
 */
// function sum(start, end) {
//     let s = 0;
//     for (let i = start; i <= end; i += 1) {
//         s += i;
//     }

//     return s;
// }

// console.log(sum(10, 15));

/**
 * –ò—â–µ—Ç –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ start, –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 7
 */
// function findFirstDivisor(start) {
//     while (start % 7 !== 0 && start !== 0) {
//         console.log(start);
//         start -= 1;
//     }

//     return start;
// }

// console.log('–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ', findFirstDivisor(3));

// –ø–æ–ª—É—á–∏—Ç—å–¶–µ–Ω—É–î–æ—Å—Ç–∞–≤–∫–∏

/**
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ count.
 * –î–æ—Å—Ç–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ - 215 —Ä.
 * –ö–∞–∂–¥—ã–π –ø–æ—Å–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä –ø–æ —Ü–µ–Ω–µ 50 —Ä.
 * –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–µ—Ä–Ω—É—Ç—å —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏
 */
// function getDeliveryPrice(count) {
//     if (count === 0) {
//         return 0;
//     }

//     const firstDeliveryPrice = 215;
//     const nextDeliveryPrice = 50;

//     return firstDeliveryPrice + nextDeliveryPrice * (count - 1);
// }

// console.log(getDeliveryPrice(3));
/**
 * answer - –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
 * 
 */
 function guess(answer) {
    let number; // —á–∏—Å–ª–æ, –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    do {
        number = Number(prompt('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ'));

        if (answer > number) {
            alert('–í–≤–µ–¥–∏ –±–æ–ª—å—à–µ')
        } else if (answer < number) {
            alert('–í–≤–µ–¥–∏ –º–µ–Ω—å—à–µ');
        } else {
            alert('–£–≥–∞–¥–∞–ª!üòçüòç');
        }
    } while (answer !== number); // –ø–æ–∫–∞ –Ω–µ —É–≥–∞–¥–∞–ª => –ø–æ–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –Ω–µ —Å–æ–≤–ø–∞–¥—ë—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º
}

const answer = Math.floor(Math.random() * 50); // –æ—Ç 0 –¥–æ 50 (–°–õ–£–ß–ê–ô–ù–û–ï);
// guess(answer);

/**
 * –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤–æ–¥–∏—Ç —á–∏—Å–ª–æ a –≤ —Å—Ç–µ–ø–µ–Ω—å n
 */
function pow(a, n) {
    if (n === 0) {
        return 1;
    } else if (n === 1) {
        return a;
    } else {
        console.log(`${a}^${n}=${a}*${a}^(${n - 1})`)
        return a * pow(a, n - 1);
    }
}

// console.log(pow(2, 5));

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç n-–µ —á–∏—Å–ª–æ –§–∏–±–±–æ–Ω–∞—á—á–∏
 */
function fibbonacci(n) {
    if (n === 1) {
        return 0;
    } else if (n === 2) {
        return 1;
    } else {
        return fibbonacci(n - 1) + fibbonacci(n - 2);
    }
}

console.log(fibbonacci(9));